include limits.inc
include errno.inc
include string.inc
include quadmath.inc

    .assert:on

.template assert

    lastResult errno_t ?

    .operator assert :vararg {

        mov this.lastResult,0
        _set_errno(0)
        }
;;;;;;;;

    .operator mulq :vararg {
        this.__v(mulq, 0.0, 0.0, 0.0)
        this.__v(mulq, 0.0, 1.0, 0.0)
        this.__v(mulq, 0.0, -1.0, 0.0)
        this.__v(mulq, 2.0, 1.0, 2.0)
        this.__v(mulq, 1.1, 2.2, 400035C28F5C28F5C28F5C28F5C28F5Ar)
        this.__v(mulq, 0.01, 0.1, 3FF50624DD2F1A9FBE76C8B439581061r)
        this.__v(mulq, 1.0001, 1000000.0002, 4012E8548001A378EB79354B10749755r)

        this.__m(mulq, 0.0, 0.0, 0.0)
        this.__m(mulq, 0.0, 1.0, 0.0)
        this.__m(mulq, 0.0, -1.0, 0.0)
        this.__m(mulq, 2.0, 1.0, 2.0)
        this.__m(mulq, 1.1, 2.2, 400035C28F5C28F5C28F5C28F5C28F5Ar)
        this.__m(mulq, 0.01, 0.1, 3FF50624DD2F1A9FBE76C8B439581061r)
        this.__m(mulq, 1.0001, 1000000.0002, 4012E8548001A378EB79354B10749755r)
        }

        .operator __m :abs, :abs, :abs, :abs, :vararg {
            local a, b, r
            .data
            align 16
            a oword _2
            ifnb <_4>
                b oword _3
                ifidn typeid(?, _4),<?flt>
                    r oword _4
                else
                    r errno_t _4
                endif
                .code
                __&_1&(addr a, addr b)
            else
                r oword _3
                .code
                __&_1&(addr a)
            endif
            if typeof(r) eq 16
                mov rax,qword ptr a
                mov rdx,qword ptr a[8]
                mov rbx,qword ptr r
                mov rcx,qword ptr r[8]
                .assert( rax == rbx && rdx == rcx )
            else
                mov ebx,r
                .assert( eax == ebx )
            endif
            }

        .operator __v :abs, :abs, :abs, :abs, :vararg {
          local a, b, r
           .data
            align 16
            a oword _2
            ifnb <_4>
                b oword _3
                ifidn typeid(?, _4),<?flt>
                    r oword _4
                else
                    r errno_t _4
                endif
                .code
                _1(a, b)
            else
                r oword _3
                .code
                _1(a)
            endif
            if typeof(r) eq 16
                movq    rax,xmm0
                movhlps xmm0,xmm0
                movq    rdx,xmm0
                mov     rbx,qword ptr r
                mov     rcx,qword ptr r[8]
                .assert( rax == rbx && rdx == rcx )
            else
                mov ebx,r
                .assert( eax == ebx )
            endif
            }

    .operator divq :vararg {

        this.__v(divq, 0.0, 0.0, 7FFF8000000000000000000000000000r)
        this.__v(divq, 0.0, 1.0, 0.0)
        this.__v(divq, 0.0, -1.0, 0.0)
        this.__v(divq, 2.0, 1.0, 2.0)
        this.__v(divq, 1.1, 2.2, 0.5)
        this.__v(divq, 0.01, 0.1, 0.1)
        this.__v(divq, 66666.6, 2.0, 33333.3)
        this.__v(divq, 1.0001, 1000000.0002, 3FEB0C7659426EB346F3B91986814E5Er)

        this.__m(divq, 0.0, 0.0, 7FFF8000000000000000000000000000r)
        this.__m(divq, 0.0, 1.0, 0.0)
        this.__m(divq, 0.0, -1.0, 0.0)
        this.__m(divq, 2.0, 1.0, 2.0)
        this.__m(divq, 1.1, 2.2, 0.5)
        this.__m(divq, 0.01, 0.1, 0.1)
        this.__m(divq, 66666.6, 2.0, 33333.3)
        this.__m(divq, 1.0001, 1000000.0002, 3FEB0C7659426EB346F3B91986814E5Er)
        }

    .operator addq :vararg {

        this.__v(addq, 0.0, 0.0, 0.0)
        this.__v(addq, 1.0, 0.0, 1.0)
        this.__v(addq, -1.0, 0.0, -1.0)
        this.__v(addq, 1.0, 1.0, 2.0)
        this.__v(addq, 1.1, 1.1, 2.2)
        this.__v(addq, 999999.0001, 1.0001, 1000000.0002)
        this.__v(addq, 0.09, 0.01, 0.1)

        this.__m(addq, 0.0, 0.0, 0.0)
        this.__m(addq, 1.0, 0.0, 1.0)
        this.__m(addq, -1.0, 0.0, -1.0)
        this.__m(addq, 1.0, 1.0, 2.0)
        this.__m(addq, 1.1, 1.1, 2.2)
        this.__m(addq, 999999.0001, 1.0001, 1000000.0002)
        this.__m(addq, 0.09, 0.01, 0.1)
        }

    .operator subq :vararg {

        this.__v(subq, 0.0, 0.0, 0.0)
        this.__v(subq, 1.0, 0.0, 1.0)
        this.__v(subq, -1.0, 0.0, -1.0)
        this.__v(subq, 1.0, 1.0, 0.0)
        this.__v(subq, 1.1, 1.1, 0.0)
        this.__v(subq, 10000000.0002, 999999.0001, 9000001.0001 )

        this.__m(subq, 0.0, 0.0, 0.0)
        this.__m(subq, 1.0, 0.0, 1.0)
        this.__m(subq, -1.0, 0.0, -1.0)
        this.__m(subq, 1.0, 1.0, 0.0)
        this.__m(subq, 1.1, 1.1, 0.0)
        this.__m(subq, 10000000.0002, 999999.0001, 9000001.0001 )
        }

    .operator cmpq :vararg {

        this.__v(cmpq, 0.0, 1.0, -1 )
        this.__v(cmpq, 0.0, 0.0, 0 )
        this.__v(cmpq, 1.0, 0.0, 1 )
        this.__v(cmpq, 0.0, 1.0, -1 )
        this.__v(cmpq, -0.0, 0.0, -1 )
        this.__v(cmpq, -1.0, -2.0, 1 )
        this.__v(cmpq, 0.0, -1.0, 1 )
        this.__v(cmpq, -1.0, -1.0, 0 )
        this.__v(cmpq, -9.9, -9.9, 0 )
        this.__v(cmpq, 9223372036854775808.0, 9223372036854775808.0, 0 )
        this.__v(cmpq, 9223372036854775808.0, 9223372036854775807.0, 1 )
        this.__v(cmpq, 9223372036854775807.0, 9223372036854775808.0, -1 )
        this.__v(cmpq, -9223372036854775808.0, -9223372036854775808.0, 0 )
        this.__v(cmpq, -9223372036854775807.0, -9223372036854775808.0, 1 )
        this.__v(cmpq, -9223372036854775808.0, -9223372036854775807.0, -1 )

        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, 0.0, 0.0, 0 )
        this.__m(cmpq, 1.0, 0.0, 1 )
        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, -0.0, 0.0, -1 )
        this.__m(cmpq, -1.0, -2.0, 1 )
        this.__m(cmpq, 0.0, -1.0, 1 )
        this.__m(cmpq, -1.0, -1.0, 0 )
        this.__m(cmpq, -9.9, -9.9, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775808.0, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775807.0, 1 )
        this.__m(cmpq, 9223372036854775807.0, 9223372036854775808.0, -1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775808.0, 0 )
        this.__m(cmpq, -9223372036854775807.0, -9223372036854775808.0, 1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775807.0, -1 )
        }

    .operator fltscale :vararg {}
        .operator __vscale :abs, :abs, :abs, :vararg {}
        .operator __mscale :abs, :abs, :abs, :vararg {}


    ; Convert HALF, float, double, long double, int, __int64, string


    .operator cvtq_h :vararg {

        this.__vqh( 0, 0.0, 0 )
        this.__vqh( 0, 1.0, 0x3C00 )
        this.__vqh( 0, 1.000976563, 0x3C01 )
        this.__vqh( 0, 0.0009765625, 0x1400 )
        this.__vqh( 0, -2.0, 0xC000 )
        this.__vqh( 0, 0.33325196, 0x3555 )
        this.__vqh( 0, 65504.0, 0x7BFF )
        this.__vqh( 0, 6.103515625e-05, 0x0400 )
        this.__vqh( 0, 1.0/0.0, 0x7C00 )
        this.__vqh( 0, -1.0/0.0, 0xFC00 )
        this.__vqh( ERANGE, 5.960464478e-08, 0x0001 )

        this.__mqh( 0, 0.0, 0 )
        this.__mqh( 0, 1.0, 0x3C00 )
        this.__mqh( 0, 1.000976563, 0x3C01 )
        this.__mqh( 0, 0.0009765625, 0x1400 )
        this.__mqh( 0, -2.0, 0xC000 )
        this.__mqh( 0, 0.33325196, 0x3555 )
        this.__mqh( 0, 65504.0, 0x7BFF )
        this.__mqh( 0, 6.103515625e-05, 0x0400 )
        this.__mqh( 0, 1.0/0.0, 0x7C00 )
        this.__mqh( 0, -1.0/0.0, 0xFC00 )
        this.__mqh( ERANGE, 5.960464478e-08, 0x0001 )
        }
        .operator __vqh :abs, :abs, :abs, :vararg {
            local q, h
            .data
                align 16
                q real16 _2
                h dw _3
            .code
            cvtq_h(q)
            movzx ebx,h
            movzx eax,ax
            .assert( eax == ebx )
            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __mqh :abs, :abs, :abs, :vararg {
            local q, h
            .data
                align 16
                q real16 _2
                h dw _3
            .code
            __cvtq_h(addr h, addr q)
            mov ax,h
            mov bx,_3
            .assert( ax == bx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvtq_ss :vararg {
        this.__vqss( 3.14159265358979323846264338327, 40490FDBr )
        this.__mqss( 3.14159265358979323846264338327, 40490FDBr )
        }
        .operator __vqss :abs, :abs, :vararg {
            local a, b
            .data
                align 16
                a real16 _1
                b real4 _2
            .code
            cvtq_ss(a)
            movd eax,xmm0
            mov edx,b
            .assert( eax == edx )
            }
        .operator __mqss :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real4 _2
                r real4 0.0
            .code
            __cvtq_ss(addr r, addr a)
            mov eax,r
            mov edx,b
            .assert( eax == edx )
            }

    .operator cvtq_sd :vararg {
        this.__vqsd( 3.14159265358979323846264338327, 400921FB54442D18r )
        this.__mqsd( 3.14159265358979323846264338327, 400921FB54442D18r )
        }
        .operator __vqsd :abs, :abs, :vararg {
            local a, b
            .data
                align 16
                a real16 _1
                b real8 _2
            .code
            cvtq_sd(a)
            movq rax,xmm0
            mov rdx,b
            .assert( rax == rdx )
            }
        .operator __mqsd :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real8 _2
                r real8 0.0
            .code
            __cvtq_sd(addr r, addr a)
            mov rax,r
            mov rdx,b
            .assert( rax == rdx )
            }

    .operator cvtq_ld :vararg {

        this.__vqld( 0.0 )
        this.__vqld( 1.0 )
        this.__vqld( 9.0 / 7.0 )
        this.__vqld( 3.14159265358979323846264338327 )

        this.__mqld( 0.0 )
        this.__mqld( 1.0 )
        this.__mqld( 9.0 / 7.0 )
        this.__mqld( 3.14159265358979323846264338327 )
        }
        .operator __vqld :abs, :vararg {
            local a, b
            .data
                align 16
                a real16 _1
                b real10 _1
            .code
            cvtq_ld(a)
            movaps  a,xmm0
            mov     rax,qword ptr b[0]
            mov     rbx,qword ptr a[0]
            movzx   ecx,word ptr b[8]
            movzx   edx,word ptr a[8]
            .assert( rax == rbx && edx == ecx )
            }
        .operator __mqld :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real10 _1
                r real10 0.0
            .code
            __cvtq_ld(addr r, addr a)
            mov     rax,qword ptr r
            mov     rbx,qword ptr b
            movzx   edx,word ptr r[8]
            movzx   ecx,word ptr b[8]
            .assert( rax == rbx && edx == ecx )
            }

    .operator cvtq_i32 :vararg {

        this.__vqi32( 0, 0.0, 0)
        this.__vqi32( 0, 0.10, 0, 0.0)
        this.__vqi32( 0, 1.0, 1)
        this.__vqi32( 0, 2.0, 2)
        this.__vqi32( 0, 0.99999999, 0, 0.0)
        this.__vqi32( 0, 7777777.0, 7777777)
        this.__vqi32( 0, 2147483647.0, 2147483647)
        this.__vqi32( 0, 2147483647.0, INT_MAX)
        this.__vqi32( 0, -2147483648.0, INT_MIN)
        this.__vqi32( 0, -1.0, UINT_MAX)
        this.__vqi32( 0, -100000000000000000000.0, INT_MIN, -2147483648.0) ; ERANGE
        this.__vqi32( 0, 100000000000000000000.0, INT_MAX, 2147483647.0) ; ERANGE

        this.__mqi32( 0, 0.0, 0)
        this.__mqi32( 0, 0.10, 0, 0.0)
        this.__mqi32( 0, 1.0, 1)
        this.__mqi32( 0, 2.0, 2)
        this.__mqi32( 0, 0.99999999, 0, 0.0)
        this.__mqi32( 0, 7777777.0, 7777777)
        this.__mqi32( 0, 2147483647.0, 2147483647)
        this.__mqi32( 0, 2147483647.0, INT_MAX)
        this.__mqi32( 0, -2147483648.0, INT_MIN)
        this.__mqi32( 0, -1.0, UINT_MAX)
        this.__mqi32( 0, -100000000000000000000.0, INT_MIN, -2147483648.0) ; ERANGE
        this.__mqi32( 0, 100000000000000000000.0, INT_MAX, 2147483647.0) ; ERANGE
        }
        .operator __vqi32 :abs, :abs, :abs, :abs, :vararg {
            local a, b
            .data
                align 16
                ifnb <_4>
                    a real16 _4
                else
                    a real16 _2
                endif
                b real16 _2
            .code
            cvtq_i32(a)
            mov ebx,_3
            .assert( eax == ebx )
            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __mqi32 :abs, :abs, :abs, :abs, :vararg {
            local a, b
            .data
                align 16
                ifnb <_4>
                    a real16 _4
                else
                    a real16 _2
                endif
                b real16 _2
            .code
            __cvtq_i32(addr a)
            mov ebx,_3
            .assert( eax == ebx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvtq_i64 :vararg {

        this.__vqi64( 0, 0.0, 0)
        this.__vqi64( 0, 0.10, 0, 0.0)
        this.__vqi64( 0, 1.0, 1)
        this.__vqi64( 0, 2.0, 2)
        this.__vqi64( 0, 0.99999999, 0, 0.0)
        this.__vqi64( 0, 7777777.0, 7777777)
        this.__vqi64( 0, 9223372036854775807.0, 9223372036854775807)
        this.__vqi64( 0, 9223372036854775807.0, _I64_MAX)
        this.__vqi64( 0, -9223372036854775807.0, -9223372036854775807)
        this.__vqi64( 0, 9223372036854775808.0, _I64_MAX, 9223372036854775807.0) ; ERANGE
        this.__vqi64( ERANGE, -9223372036854775808.0, _I64_MIN, -9223372036854775808.0)
        this.__vqi64( 0, -1.0, _UI64_MAX)

        this.__mqi64( 0, 0.0, 0)
        this.__mqi64( 0, 0.10, 0, 0.0)
        this.__mqi64( 0, 1.0, 1)
        this.__mqi64( 0, 2.0, 2)
        this.__mqi64( 0, 0.99999999, 0, 0.0)
        this.__mqi64( 0, 7777777.0, 7777777)
        this.__mqi64( 0, 9223372036854775807.0, 9223372036854775807)
        this.__mqi64( 0, 9223372036854775807.0, _I64_MAX)
        this.__mqi64( 0, -9223372036854775807.0, -9223372036854775807)
        this.__mqi64( 0, 9223372036854775808.0, _I64_MAX, 9223372036854775807.0) ; ERANGE
        this.__mqi64( ERANGE, -9223372036854775808.0, _I64_MIN, -9223372036854775808.0)
        this.__mqi64( 0, -1.0, _UI64_MAX)
        }
        .operator __vqi64 :abs, :abs, :abs, :abs, :vararg {
            local a, b
            .data
                align 16
                ifnb <_4>
                    a real16 _4
                else
                    a real16 _2
                endif
                b real16 _2
            .code
            cvtq_i64(a)
            mov rbx,_3
            .assert( rax == rbx )

            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __mqi64 :abs, :abs, :abs, :abs, :vararg {
            local a, b
            .data
                align 16
                ifnb <_4>
                    a real16 _4
                else
                    a real16 _2
                endif
                b real16 _2
            .code
            __cvtq_i64(addr a)
            mov rbx,_3
            .assert( rax == rbx )

            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvth_q :vararg {

        this.__vhq( 0, 0.0, 0)
        this.__vhq( 0, 1.0, 0x3C00)
        this.__vhq( 0, 1.000976563, 0x3C01)
        this.__vhq( 0, 0.0009765625, 0x1400)
        this.__vhq( 0, -2.0, 0xC000)
        this.__vhq( 0, 0.33325196, 0x3555)
        this.__vhq( 0, 65504.0, 0x7BFF)
        this.__vhq( 0, 6.103515625e-05, 0x0400)
        this.__vhq( 0, 6.097555161e-05, 0x03FF)
        this.__vhq( 0, 5.960464478e-08, 0x0001)
        this.__vhq( 0, 1.0/0.0, 0x7C00)
        this.__vhq( 0, -1.0/0.0, 0xFC00)
        this.__vhq( EDOM, 0.0/0.0, 0xFFFF)

        this.__mhq( 0, 0.0, 0)
        this.__mhq( 0, 1.0, 0x3C00)
        this.__mhq( 0, 1.000976563, 0x3C01)
        this.__mhq( 0, 0.0009765625, 0x1400)
        this.__mhq( 0, -2.0, 0xC000)
        this.__mhq( 0, 0.33325196, 0x3555)
        this.__mhq( 0, 65504.0, 0x7BFF)
        this.__mhq( 0, 6.103515625e-05, 0x0400)
        this.__mhq( 0, 6.097555161e-05, 0x03FF)
        this.__mhq( 0, 5.960464478e-08, 0x0001)
        this.__mhq( 0, 1.0/0.0, 0x7C00)
        this.__mhq( 0, -1.0/0.0, 0xFC00)
        this.__mhq( EDOM, 0.0/0.0, 0xFFFF)
        }
        .operator __vhq :abs, :abs, :abs, :vararg {
            local b, q, w
            .data
                align 16
                q real16 _2
                b real16 0.0
                w dw _3
            .code
            cvth_q(w)
            movaps b,xmm0
            mov al,byte ptr b[11]
            mov edx,dword ptr b[12]
            mov bl,byte ptr q[11]
            mov ecx,dword ptr q[12]
            .assert( edx == ecx && al == bl )

            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __mhq :abs, :abs, :abs, :vararg {
            local b, q, w
            .data
                align 16
                q real16 _2
                b real16 0.0
                w dw _3
            .code
            __cvth_q(addr b, addr w)
            mov al,byte ptr b[11]
            mov edx,dword ptr b[12]
            mov bl,byte ptr q[11]
            mov ecx,dword ptr q[12]
            .assert( edx == ecx && al == bl )

            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvtss_q :vararg {

        this.__vssq( 0,             0.0, 0.0 )
        this.__vssq( 0,             1.0, 0x3F800000 )
        this.__vssq( 0,            -2.0, 0xC0000000 )
        this.__vssq( 0,  3.402823466e38, 3.402823466e38 )
        this.__vssq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__vssq( 0,            -0.0, 0x80000000 )
        this.__vssq( EDOM,    0.0 / 0.0, 0x7F800000 )

        this.__mssq( 0,             0.0, 0.0 )
        this.__mssq( 0,             1.0, 0x3F800000 )
        this.__mssq( 0,            -2.0, 0xC0000000 )
        this.__mssq( 0,  3.402823466e38, 3.402823466e38 )
        this.__mssq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__mssq( 0,            -0.0, 0x80000000 )
        this.__mssq( EDOM,    0.0 / 0.0, 0x7F800000 )
        }
        .operator __vssq :abs, :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dd _3
            .code
            cvtss_q(r)
            movaps b,xmm0
            mov eax,dword ptr b[12]
            mov ebx,dword ptr a[12]
            .assert( eax == ebx )

            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __mssq :abs, :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dd _3
            .code
            __cvtss_q(addr b, addr r)
            mov eax,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == edx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvtsd_q :vararg {

        this.__vsdq( 0,             0.0, 0.0 )
        this.__vsdq( 0,             1.0, 1.0 )
        this.__vsdq( 0,            -2.0, -2.0 )
        this.__vsdq( 0,  3.402823466e38, 3.402823466e38 )
        this.__vsdq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__vsdq( 0,            -0.0, -0.0 )
        this.__vsdq( 0,       0.0 / 0.0, 0.0 / 0.0 )

        this.__msdq( 0,             0.0, 0.0 )
        this.__msdq( 0,             1.0, 1.0 )
        this.__msdq( 0,            -2.0, -2.0 )
        this.__msdq( 0,  3.402823466e38, 3.402823466e38 )
        this.__msdq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__msdq( 0,            -0.0, -0.0 )
        this.__msdq( 0,       0.0 / 0.0, 0.0 / 0.0 )
        }
        .operator __vsdq :abs, :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dq _3
            .code
            cvtsd_q(r)
            movaps b,xmm0
            mov rax,qword ptr b[8]
            mov rbx,qword ptr a[8]
            .assert( rax == rbx )
            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __msdq :abs, :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dq _3
            .code
            __cvtsd_q(addr b, addr r)
            mov rax,qword ptr b[8]
            mov rbx,qword ptr a[8]
            .assert( rax == rbx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvtld_q :vararg {

        this.__vldq(             0.0, 0.0 )
        this.__vldq(             1.0, 1.0 )
        this.__vldq(            -2.0, -2.0 )
        this.__vldq(  3.402823466e38, 3.402823466e38 )
        this.__vldq( 1.175494351e-38, 1.175494351e-38 )
        this.__vldq(            -0.0, -0.0 )
        this.__vldq(       0.0 / 0.0, 7FFF8000000000000000000000000000r )

        this.__mldq(             0.0, 0.0 )
        this.__mldq(             1.0, 1.0 )
        this.__mldq(            -2.0, -2.0 )
        this.__mldq(  3.402823466e38, 3.402823466e38 )
        this.__mldq( 1.175494351e-38, 1.175494351e-38 )
        this.__mldq(            -0.0, -0.0 )
        this.__mldq(       0.0 / 0.0, 7FFF8000000000000000000000000000r )
        }
        .operator __vldq :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real16 0.0
                r real10 _2
            .code
            cvtld_q(r)
            movaps b,xmm0
            mov rax,qword ptr b[8]
            mov rbx,qword ptr a[8]
            .assert( rax == rbx )
            this.SetStatus()
            .assert( eax == 0 )
            }
        .operator __mldq :abs, :abs, :vararg {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real16 0.0
                r real10 _2
            .code
            __cvtld_q(addr b, addr r)
            mov rax,qword ptr b[8]
            mov rbx,qword ptr a[8]
            .assert( rax == rbx )
            this.SetStatus()
            .assert( eax == 0 )
            }

    .operator cvti32_q :vararg {

        this.__vi32q( 0, 0,                   0.0 )
        this.__vi32q( 0, 1,                   1.0 )
        this.__vi32q( 0, 2,                   2.0 )
        this.__vi32q( 0, 7777777,       7777777.0 )
        this.__vi32q( 0, 2147483647, 2147483647.0 )
        this.__vi32q( 0, INT_MAX,    2147483647.0 )
        this.__vi32q( 0, INT_MIN,   -2147483648.0 )
        this.__vi32q( 0, UINT_MAX,           -1.0 )
        this.__vi32q( 0, INT_MIN,   -2147483648.0 )
        this.__vi32q( 0, INT_MAX,    2147483647.0 )

        this.__mi32q( 0, 0,                   0.0 )
        this.__mi32q( 0, 1,                   1.0 )
        this.__mi32q( 0, 2,                   2.0 )
        this.__mi32q( 0, 7777777,       7777777.0 )
        this.__mi32q( 0, 2147483647, 2147483647.0 )
        this.__mi32q( 0, INT_MAX,    2147483647.0 )
        this.__mi32q( 0, INT_MIN,   -2147483648.0 )
        this.__mi32q( 0, UINT_MAX,           -1.0 )
        this.__mi32q( 0, INT_MIN,   -2147483648.0 )
        this.__mi32q( 0, INT_MAX,    2147483647.0 )
        }
        .operator __vi32q :abs, :abs, :abs, :vararg {
            local a, i
            .data
                align 16
                a real16 _3
                i long_t _2
            .code
            cvti32_q(i)
            movq    rax,xmm0
            movhlps xmm0,xmm0
            movq    rdx,xmm0
            mov     rbx,qword ptr a
            mov     rcx,qword ptr a[8]
            .assert( rax == rbx && rdx == rcx )
            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __mi32q :abs, :abs, :abs, :vararg {
            local a, b, i
            .data
                align 16
                a real16 0.0
                b real16 _3
                i long_t _2
            .code
            __cvti32_q(addr a, i)
            mov rax,qword ptr a
            mov rdx,qword ptr a[8]
            mov rbx,qword ptr b
            mov rcx,qword ptr b[8]
            .assert( rax == rbx && rdx == rcx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvti64_q :vararg {

        this.__vi64q( 0, 0,                                       0.0 )
        this.__vi64q( 0, 1,                                       1.0 )
        this.__vi64q( 0, 2,                                       2.0 )
        this.__vi64q( 0, 7777777,                           7777777.0 )
        this.__vi64q( 0, 9223372036854775807,   9223372036854775807.0 )
        this.__vi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__vi64q( 0, -9223372036854775807, -9223372036854775807.0 )
        this.__vi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__vi64q( 0, _I64_MIN,             -9223372036854775808.0 )
        this.__vi64q( 0, _UI64_MAX,                              -1.0 )

        this.__mi64q( 0, 0,                                       0.0 )
        this.__mi64q( 0, 1,                                       1.0 )
        this.__mi64q( 0, 2,                                       2.0 )
        this.__mi64q( 0, 7777777,                           7777777.0 )
        this.__mi64q( 0, 9223372036854775807,   9223372036854775807.0 )
        this.__mi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__mi64q( 0, -9223372036854775807, -9223372036854775807.0 )
        this.__mi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__mi64q( 0, _I64_MIN,             -9223372036854775808.0 )
        this.__mi64q( 0, _UI64_MAX,                              -1.0 )
        }
        .operator __vi64q :abs, :abs, :abs, :vararg {
            local a, i
            .data
                align 16
                a real16 _3
                i sqword _2
            .code
            cvti64_q(i)
            movq    rax,xmm0
            movhlps xmm0,xmm0
            movq    rdx,xmm0
            mov     rbx,qword ptr a
            mov     rcx,qword ptr a[8]
            .assert( rax == rbx && rdx == rcx )
            this.SetStatus()
            .assert( eax == _1 )
            }
        .operator __mi64q :abs, :abs, :abs, :vararg {
            local a, b, i
            .data
                align 16
                a real16 0.0
                b real16 _3
                i sqword _2
            .code
            __cvti64_q(addr a, i)
            mov rax,qword ptr a
            mov rdx,qword ptr a[8]
            mov rbx,qword ptr b
            mov rcx,qword ptr b[8]
            .assert( rax == rbx && rdx == rcx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .operator cvta_q :vararg {

        this.__vaq( addr @CStr( "." ), 0.0, '.' )
        this.__vaq( addr @CStr( "-1.0e-0a" ), -1.0, 'a' )
        this.__vaq( addr @CStr( "-1e-0a" ), -1.0, 'a' )
        this.__vaq( addr @CStr( "123456789.0" ), 123456789.0, 0 )
        this.__vaq( addr @CStr( "1.e8192" ), 7FFF0000000000000000000000000000r, 0 )
        this.__vaq( addr @CStr( "3.14159265358979323846264338327"), 4000921FB54442D18469898CC516A159r, 0 )

        this.__maq( addr @CStr( "." ), 0.0, '.' )
        this.__maq( addr @CStr( "-1.0e-0a" ), -1.0, 'a' )
        this.__maq( addr @CStr( "-1e-0a" ), -1.0, 'a' )
        this.__maq( addr @CStr( "123456789.0" ), 123456789.0, 0 )
        this.__maq( addr @CStr( "1.e8192"), 7FFF0000000000000000000000000000r, 0 )
        this.__maq( addr @CStr( "3.14159265358979323846264338327"), 4000921FB54442D18469898CC516A159r, 0 )
        }
        .operator __vaq :abs, :abs, :abs, :vararg {
            local a, eptr
            .data
                align 16
                a real16 _2
                eptr string_t NULL
            .code
            cvta_q(_1, addr eptr)
            mov rdx,eptr
            .assert( byte ptr [rdx] == _3 )
            movq    rax,xmm0
            movhlps xmm0,xmm0
            movq    rdx,xmm0
            mov     rbx,qword ptr a
            mov     rcx,qword ptr a[8]
            .assert( rax == rbx && rdx == rcx )
            }
        .operator __maq :abs, :abs, :abs, :vararg {
            local a, b, eptr
            .data
                align 16
                a real16 _2
                b real16 0.0
                eptr string_t NULL
            .code
            __cvta_q(addr b, _1, addr eptr)
            mov rdx,eptr
            .assert( byte ptr [rdx] == _3 )
            mov rax,qword ptr a
            mov rdx,qword ptr a[8]
            mov rbx,qword ptr b
            mov rcx,qword ptr b[8]
            .assert( rax == rbx && rdx == rcx )
            }


    .operator cfltcvt :vararg {

        this.__vflt( 0.0, @CStr( "0" ) )
        this.__vflt( 1.0, @CStr( "1" ) )
        this.__vflt(-1.0, @CStr("-1" ) )
        this.__vflt( 1.0, @CStr( "1.0" ), 0, 1 )
        this.__vflt( 1.0e+100, @CStr( "1.0e+100" ), 'e', 1 )
        this.__vflt( 1.0, @CStr( "1" ), 'g', 6 )
        this.__vflt( 1.0, @CStr( "1.000000" ), 0, 6 )
        }
        .operator __vflt :abs, :abs, :abs=<0>, :abs=<0>, :abs=<0>, :vararg {
            local a, b, c, p, f
            .data
                align 16
                a real8 _1
                b char_t 64 dup(?)
                c int_t _3 ; type char
                p int_t _4 ; precision value
                f int_t _5
            .code
            _cfltcvt(addr a, addr b, c, p, f)
            strcmp(addr _2, addr b)
            .assert( eax == 0 )
            }

    .operator cldcvt :vararg {}
    .operator cqfcvt :vararg {}
    .operator strtoflt128 :vararg {}

    .operator acosq :vararg {}
    .operator acoshq :vararg {}
    .operator asinq :vararg {}
    .operator asinhq :vararg {}

    .operator atanq :vararg {
        this.__v(atanq, 0.0, 0.0)
        this.__v(atanq, 1.5, 0.9827937232473290679857106110146660710)
        }

    .operator atanhq :vararg {}

    .operator atan2q :vararg {
        this.__v(atan2q, 0.0, 0.0, 0.0)
        this.__v(atan2q, 1.0, 2.0, 3FFDDAC670561BB4F68ADFC88BD97874r)
        this.__v(atan2q, 0.5, 1.5, 0.3217505543966421934014046143586613)
        }

    .operator cbrtq :vararg {}
    .operator ceilq :vararg {}
    .operator copysignq :vararg {}
    .operator coshq :vararg {}
    .operator cosq :vararg {}
    .operator erfq :vararg {}
    .operator erfcq :vararg {}
    .operator expq :vararg {}
    .operator expm1q :vararg {}
    .operator fabsq :vararg {}
    .operator fdimq :vararg {}
    .operator finiteq :vararg {}
    .operator floorq :vararg {}
    .operator fmaq :vararg {}
    .operator fmaxq :vararg {}
    .operator fminq :vararg {}
    .operator fmodq :vararg {}
    .operator frexpq :vararg {}
    .operator hypotq :vararg {}
    .operator isinfq :vararg {}
    .operator ilogbq :vararg {}
    .operator isnanq :vararg {}
    .operator j0q :vararg {}
    .operator j1q :vararg {}
    .operator jnq :vararg {}
    .operator ldexpq :vararg {}
    .operator lgammaq :vararg {}
    .operator llrintq :vararg {}
    .operator llroundq :vararg {}
    .operator logbq :vararg {}
    .operator logq :vararg {}
    .operator log10q :vararg {}
    .operator log2q :vararg {}
    .operator log1pq :vararg {}
    .operator lrintq :vararg {}
    .operator lroundq :vararg {}
    .operator modfq :vararg {}
    .operator nanq :vararg {}
    .operator nearbyintq :vararg {}
    .operator nextafterq :vararg {}
    .operator powq :vararg {}
    .operator remainderq :vararg {}
    .operator remquoq :vararg {}
    .operator rintq :vararg {}
    .operator roundq :vararg {}
    .operator scalblnq :vararg {}
    .operator scalbnq :vararg {}
    .operator signbitq :vararg {}
    .operator sincosq :vararg {}
    .operator sinhq :vararg {}
    .operator sinq :vararg {}

    .operator sqrtq :vararg {

        this.__v(sqrtq, 0.0, 0.0)
        this.__v(sqrtq, 1.0, 1.0)
        this.__v(sqrtq, 2.0, 1.4142135623730950488016887242097015)
        }

    .operator tanq :vararg {}
    .operator tanhq :vararg {}
    .operator tgammaq :vararg {}
    .operator truncq :vararg {}
    .operator y0q :vararg {}
    .operator y1q :vararg {}
    .operator ynq :vararg {}
    .operator quadmath_snprintf :vararg {}

;;;;;;;;

    .operator acosqf  :vararg {
        this.__v(acosqf, 0.0, 3FFF921FB54442D1846A000000000000r) ; 1.570796326794896619
        this.__v(acosqf, 0.5, 3FFF0C152382D7365678000000000000r) ; 1.047197551196597721
        }
    .operator atanqf  :vararg {
        this.__v(atanqf, 0.0, 0.0)
        this.__v(atanqf, 1.5, 3FFEF730BD281F69B200000000000000r) ; 0.982793723247329068
        }
    .operator atan2qf :vararg {
        this.__v(atan2qf, 0.0, 0.0, 0.0)
        this.__v(atan2qf, 0.5, 1.5, 3FFD4978FA3269EE1248000000000000r) ; 0.3217505543966421934
        }
    .operator cbrtqf :vararg {
        }
    .operator ceilqf :vararg {
        this.__v(ceilqf, 0.0, 0.0)
        this.__v(ceilqf, 2.5, 3.0)
        }
    .operator cosqf :vararg {
        this.__v(cosqf, 0.0, 1.0)
        this.__v(cosqf, 10.0, 0BFFEAD9AC890C6B1F20A000000000000r) ; -0.8390715290764524523
        }
    .operator expqf :vararg {
        this.__v(expqf, 0.0, 1.0)
        this.__v(expqf, 1.5, 40011ED3FE64FC542000000000000000r) ; 4.481689070338065406
        }
    .operator floorqf :vararg {
        this.__v(floorqf, 0.0, 0.0)
        this.__v(floorqf, 2.57, 2.0)
        }
    .operator fmodqf :vararg {
        this.__v(fmodqf, 1.0, 1.0, 0.0)
        this.__v(fmodqf, 1.5, 1.2, 3FFD3333333333333338000000000000r) ; 0.3
        }
    .operator logqf :vararg {
        this.__v(logqf, 1.5, 3FFD9F323ECBF984BF2C000000000000r) ; 0.4054651081081643820
        }
    .operator log10qf :vararg {
        this.__v(log10qf, 1.5, 3FFC68A288B60B7FC2B8000000000000r) ; 0.1760912590556812421
        }
    .operator sinqf :vararg {
        this.__v(sinqf, 0.0, 0.0)
        this.__v(sinqf, 0.5, 3FFDEAEE8744B05EFE88000000000000r) ; 0.4794255386042030003
        }
    .operator sqrtqf :vararg {
        this.__v(sqrtqf, 0.0, 0.0)
        this.__v(sqrtqf, 1.0, 1.0)
        this.__v(sqrtqf, 2.0, 3FFF6A09E667F3BCD000000000000000r) ; 1.414213562373095148
        }
    .operator tanqf :vararg {
        this.__v(tanqf, 0.0, 0.0)
        this.__v(tanqf, 1.5, 4002C33ED50B887775A6000000000000r) ; 14.10141994717171939
        }

;;;;;;;;

    .operator SetStatus :abs, :vararg {

        .new status:errno_t
        ifnb <_1>
            mov status,_1
        else
            _get_errno(&status)
            _set_errno(0)
        endif
        mov eax,status
        .if eax
            mov this.lastResult,eax
        .endif
        }
    .ends


    .code

main proc

    .new this:assert()

    ; */+-

    this.mulq()
    this.divq()
    this.addq()
    this.subq()
    this.cmpq()
    this.fltscale()

    ; Convert HALF, float, double, long double, int, __int64, string

    this.cvtq_h()
    this.cvtq_ss()
    this.cvtq_sd()
    this.cvtq_ld()
    this.cvtq_i32()
    this.cvtq_i64()
    this.cvth_q()
    this.cvtss_q()
    this.cvtsd_q()
    this.cvtld_q()
    this.cvti32_q()
    this.cvti64_q()
    this.cvta_q()

    this.cfltcvt()
    this.cldcvt()
    this.cqfcvt()
    this.strtoflt128()

    this.acosq()
    this.acoshq()
    this.asinq()
    this.asinhq()
    this.atanq()
    this.atanhq()
    this.atan2q()

    this.cbrtq()
    this.ceilq()
    this.copysignq()
    this.coshq()
    this.cosq()
    this.erfq()
    this.erfcq()
    this.expq()
    this.expm1q()
    this.fabsq()
    this.fdimq()
    this.finiteq()
    this.floorq()
    this.fmaq()
    this.fmaxq()
    this.fminq()
    this.fmodq()
    this.frexpq()
    this.hypotq()
    this.isinfq()
    this.ilogbq()
    this.isnanq()
    this.j0q()
    this.j1q()
    this.jnq()
    this.ldexpq()
    this.lgammaq()
    this.llrintq()
    this.llroundq()
    this.logbq()
    this.logq()
    this.log10q()
    this.log2q()
    this.log1pq()
    this.lrintq()
    this.lroundq()
    this.modfq()
    this.nanq()
    this.nearbyintq()
    this.nextafterq()
    this.powq()
    this.remainderq()
    this.remquoq()
    this.rintq()
    this.roundq()
    this.scalblnq()
    this.scalbnq()
    this.signbitq()
    this.sincosq()
    this.sinhq()
    this.sinq()
    this.sqrtq()
    this.tanq()
    this.tanhq()
    this.tgammaq()
    this.truncq()
    this.y0q()
    this.y1q()
    this.ynq()
    this.quadmath_snprintf()

    this.acosqf()
    this.atanqf()
    this.atan2qf()
    this.cbrtqf()
    this.ceilqf()
    this.cosqf()
    this.expqf()
    this.floorqf()
    this.fmodqf()
    this.logqf()
    this.log10qf()
    this.sinqf()
    this.sqrtqf()
    this.tanqf()

    this.SetStatus()
    ret

main endp

    end
