include string.inc
include stdlib.inc
include errno.inc

    .code

m  proto :abs, :abs, :abs, :abs, :abs {
    this(_1, _2, _3)
    .assert( _wcsicmp(rdi, _4) == 0 )
    }
m_s proto :abs, :abs, :abs, :abs, :abs, :abs {
    this(_1, _2, _3, _4)
    _get_errno(&e)
    .assert( e == _5 )
    }

main proc uses rsi rdi rbx

  local e:errno_t
  local buffer[256]:wchar_t

    lea rdi,buffer

    m(_itow,    0, rdi,  2, L"0" )
    m(_itow,    1, rdi,  2, L"1" )
    m(_itow,    2, rdi,  2, L"10" )

    m(_itow,    0, rdi, 10, L"0" )
    m(_itow,    1, rdi, 10, L"1" )
    m(_itow,    2, rdi, 10, L"2" )

    m(_itow,    0, rdi, 16, L"0" )
    m(_itow,    1, rdi, 16, L"1" )
    m(_itow,    2, rdi, 16, L"2" )
    m(_itow,   15, rdi, 16, L"F" )

    m(_itow,    1000, rdi, 10, L"1000" )
    m(_ltow,    1000, rdi, 10, L"1000" )
    m(_ultow,   1000, rdi, 10, L"1000" )
    m(_i64tow,  1000, rdi, 10, L"1000" )
    m(_ui64tow, 1000, rdi, 10, L"1000" )

    m(_itow,    -1, rdi, 10, L"-1" )
    m(_ltow,    -1, rdi, 10, L"-1" )
    m(_ultow,   -1, rdi, 10, L"4294967295" )
    m(_i64tow,  -1, rdi, 10, L"-1" )
    m(_ui64tow, -1, rdi, 10, L"18446744073709551615" )

    _set_errno(ENOERR)

    mov ebx,lengthof(buffer)

    m_s(_itow_s,    1, rdi, rbx, 10, ENOERR )
    m_s(_ltow_s,    1, rdi, rbx, 10, ENOERR )
    m_s(_ultow_s,   1, rdi, rbx, 10, ENOERR )
    m_s(_i64tow_s,  1, rdi, rbx, 10, ENOERR )
    m_s(_ui64tow_s, 1, rdi, rbx, 10, ENOERR )

    m_s(_ltow_s, 0, NULL, rbx, 10, EINVAL )
    m_s(_ltow_s, 0,  rdi, rbx,  1, EINVAL )
    m_s(_ltow_s, 0,  rdi, rbx, 37, EINVAL )
    m_s(_ltow_s, 0,  rdi,   1, 10, ERANGE )

    xor eax,eax
    ret

main endp

    end
